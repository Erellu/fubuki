
#ifndef FUBUKI_EXTENSION_FUNCTION_@EXTENSION_NAME_UPPER@_HPP
#define FUBUKI_EXTENSION_FUNCTION_@EXTENSION_NAME_UPPER@_HPP

#include <core/config/macros.hpp>
#include <core/detail/pfn.hpp>
#include <core/handle.hpp>
#include <core/version_number.hpp>
#include <core/vulkan.hpp>

namespace fubuki
{

namespace extension
{

namespace functions
{

struct @SHORT_NAME@
{
#if defined(@EXTENSION_NAME@)
@MEMBER_PFNS@
#endif // defined(@EXTENSION_NAME@)

@STATIC_LOAD@
};

} // namespace functions

/**
 * @see https://registry.khronos.org/vulkan/specs/latest/man/html/@EXTENSION_NAME@.html
 */
namespace @SHORT_NAME@
{

/// Name of the extension.
inline constexpr auto name = "@EXTENSION_NAME@";

using functions = extension::functions::@SHORT_NAME@;

@FREE_LOAD@

} // namespace @SHORT_NAME@

} // namespace extension

namespace detail
{

template<typename functions_type, fubuki::detail::vk_function_hash pfn>
struct get_from;

/// An helper struct to retrieve the correct member of a extension::functions::@SHORT_NAME@ struct knowing its name in Vulkan.
template<fubuki::detail::vk_function_hash pfn>
struct get_from<extension::functions::@SHORT_NAME@, pfn>
{
    static constexpr auto valid = false;

    [[nodiscard]] constexpr static std::nullptr_t get(const extension::functions::@SHORT_NAME@&) noexcept
    {
        return nullptr; // Invalid generic specialisation to trigger a compile error
    }
};

#if defined(FUBUKI_MAKE_GET_FROM)
    #error Internal error. Should not be defined.
#endif

#define FUBUKI_MAKE_GET_FROM(vk_function_name, fubuki_name)                                                    \
    template<>                                                                                                 \
    struct get_from<extension::functions::@SHORT_NAME@, #vk_function_name>                                     \
    {                                                                                                          \
        static constexpr bool valid = true;                                                                    \
                                                                                                               \
        [[nodiscard]] constexpr static auto* get(const extension::functions::@SHORT_NAME@& functions) noexcept \
        {                                                                                                      \
            static_assert(                                                                                     \
                requires {                                                                                     \
                    { functions.fubuki_name };                                                                 \
                }, "Internal error. Bad name or version structure.");                                          \
                                                                                                               \
            auto pfn = functions.fubuki_name;                                                                  \
                                                                                                               \
            using expected_pfn_type = PFN_##vk_function_name;                                                  \
            using pfn_type          = std::decay_t<decltype(pfn)>;                                             \
                                                                                                               \
            static_assert(std::is_same_v<pfn_type, expected_pfn_type>, "Internal error. Type mismatch.");      \
                                                                                                               \
            return pfn;                                                                                        \
        }                                                                                                      \
    }

#if defined(@EXTENSION_NAME@)
@GET_FROM@
#endif // defined(@EXTENSION_NAME@)

#undef FUBUKI_MAKE_GET_FROM

} // namespace detail

} // namespace fubuki

#endif // FUBUKI_EXTENSION_@EXTENSION_NAME_UPPER@_HPP
