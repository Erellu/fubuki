name: Build

on:
  push:
    branches: [ "master" ]
  # Ideally, this would trigger on all push events.
  # But... Budget is limited.
  # pull_request:
  #   branches: [ "master" ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    outputs:
        all_changed_files: ${{ steps.changed-source-files.outputs.all_changed_files }}
        any_file_changed: ${{ steps.changed-source-files.outputs.any_changed }}

    steps:
    - uses: actions/checkout@v4

    - name: Get all changed source files
      id: changed-source-files
      uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
      with:
        # Avoid using single or double quotes for multiline patterns
        files: |
          **.cpp
          **.hpp

    - name: List all changed files source files
      if: steps.changed-source-files.outputs.any_changed == 'true'
      env:
        # see https://github.com/marketplace/actions/changed-files#outputs-
        # outputs.all_changed_files --> Added, copied, modified and renamed files
        ALL_CHANGED_FILES: ${{ steps.changed-source-files.outputs.all_changed_files }}
      run: |
        for file in ${ALL_CHANGED_FILES}; do
          echo "$file was changed"
        done

    - name: Run clang-format on modified files
      if: steps.changed-source-files.outputs.any_changed == 'true'
      uses: DoozyX/clang-format-lint-action@v0.20
      with:
        source: ${{ steps.changed-source-files.outputs.all_changed_files }}
        clangFormatVersion: 19

  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      # false: feedback is delivered for all matrix combinations
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc-14, clang-19, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc-14
            cpp_compiler: g++-14
          - os: ubuntu-latest
            c_compiler: clang-19
            cpp_compiler: clang++-19
        exclude:
          - os: windows-latest
            c_compiler: gcc-14
          - os: windows-latest
            c_compiler: clang-19
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
          submodules: 'true'

    # https://github.com/marketplace/actions/install-vulkan-sdk-and-runtime

    - name: Install Vulkan SDK and Runtime
      uses: jakoch/install-vulkan-sdk-action@v1.2.5
      with:
        # The Vulkan SDK version to download. Default: latest version.
        vulkan_version: 1.4.309.0

    - name: Install APT dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install pkg-config libwayland-dev wayland-protocols wayland-scanner++ libwayland-client++1 libx11-dev libxrandr-dev libxkbcommon-dev doxygen

    - name: Install gcc-14 and clang-19
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install gcc-14 g++-14 clang-19 clang++-19 libc++-17-dev libc++abi-17-dev

    - name: Setup MSVC developer command prompt # Required to use Ninja as a generator
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G Ninja
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DFUBUKI_BUILD_TESTS=ON
        -DFUBUKI_BUILD_TUTORIALS=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # TODO: clang-tidy
    # Must first filter targets used per platform (io_platform)
    # - name: clang-tidy on modified files (Linux targets)
    #     if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'Debug' && matrix.c_compiler == 'clang-19' # No need to run it twice
    #     run:

    # - name: clang-tidy on modified files (Linux targets)
    #   if: matrix.os == 'windows-latest' && matrix.build_type == 'Debug'
    #    run:

    # FIXME: doesn't seem to be possible to connect to an X server through XOpenDisplay on Linux (so fubuki.io and fubuki.io_platform are not testable on the CI).
    # On Windows, fubuki.fuyu fails because of VK_ERROR_INCOMPATIBLE_DRIVER (will probably be the same on Linux).
    # Currently, we only run fubuki.core tests that are not affected
    - name: Unit tests (core)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }} --schedule-random --test-dir tests/core
